<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_caci_cisco_bcs_cisco_import_queue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_caci_cisco_bcs_cisco_import_queue">state=ready^EQ<item display_value="Ready" endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="ready"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>BCS Queue Post Insert BR</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    var logger = new Cisco_BCS_SNLogger();
    try {
        logger.debug("Inside BCS Queue Post Insert BR for putting data into Import queue.");
        var topic = current.topic + "";
        current.state = "processing";
        current.update();
		
        var call = "";
        var callFunction = "";

        switch (topic) {
            case "Start Import":
				call = new Cisco_DAOScript();
				call.insertIntoQueue('Start Inventory Import', '', 'Devices', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'Security Advisory Bulletins', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'Field Notice Bulletins', current.bcs + '');
 				call.insertIntoQueue('Start Inventory Import', '', 'Assets', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'Configuration Best Practices Rules', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'Software Lifecycle Bulletins', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'Hardware Lifecycle Bulletins', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'Field Notices', current.bcs + '');
                call.insertIntoQueue('Start Inventory Import', '', 'Security Advisories', current.bcs + '');
                call.insertIntoQueue('Start Inventory Import', '', 'Hardware Lifecycle', current.bcs + '');
                call.insertIntoQueue('Start Inventory Import', '', 'Software Lifecycle', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'CBP Details', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'CBP Summary', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'Contract Lifecycle', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'Configuration Best Practices Rules', current.bcs + '');
				call.insertIntoQueue('Start Inventory Import', '', 'CBP Rules References', current.bcs + '');
				current.state = "completed";
                break;


            case "Start Inventory Import":
                call = new Cisco_ImportInventory();
                callFunction = call.startInventoryImport(current);
                current.state = "completed";
                break;


            case "Process Inventory Endpoint":
                call = new Cisco_ImportInventory();
                callFunction = call.processInventoryEndpoint(current);
                current.state = "completed";
                break;

            case "Process Inventory Response":
                call = new Cisco_ImportInventory();
                callFunction = call.processInventoryResponse(current);
                current.state = "completed";
                break;
        }
    } catch (e) {
        current.state = "error";
        this.logger.error("Exception caught inside Cisco Import Queues Post Insert BR : " + e);
    } finally {
        current.update();
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-10-23 07:41:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>32d1251ddb482010c81a7b8239961991</sys_id>
        <sys_mod_count>41</sys_mod_count>
        <sys_name>BCS Queue Post Insert BR</sys_name>
        <sys_overrides/>
        <sys_package display_value="Cisco BCS Operational Insights" source="x_caci_cisco_bcs">56b8d9362f3310108956ea5ef699b62d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cisco BCS Operational Insights">56b8d9362f3310108956ea5ef699b62d</sys_scope>
        <sys_update_name>sys_script_32d1251ddb482010c81a7b8239961991</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-01-12 06:00:19</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=32d1251ddb482010c81a7b8239961991"/>
</record_update>
