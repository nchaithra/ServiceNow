<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name/>
        <active>true</active>
        <client>false</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments/>
        <condition>true</condition>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <messages/>
        <name>Save &amp; Import</name>
        <onclick/>
        <order>100</order>
        <script><![CDATA[var logger = new Cisco_BCS_SNLogger();
try {
    if (new Cisco_DAOScript().checkWhetherAnyScheduleJobIsRunningOrNot() + "" == "true") {
        gs.addInfoMessage("Inventory sync job is running in the background.Please re-try after some time.");
        action.setRedirectURL('x_caci_cisco_bcs_cisco_import_queue_list.do?sysparm_query=state!%3Dcompleted');
    } else {
        //new Cisco_DAOScript().checkForContractVendor();

        current.host_name = current.host_name.trim();
		//current.customer_id = current.customer_id.trim();
        current.api_key = current.api_key.trim();

        var cl_id = current.customer_id.trim();
        //   var cl_id = current.customer_id;//.getDecryptedValue();customer_id
        var cl_secret = current.api_key.getDecryptedValue();

        var body = {
            "grantType": "client_credentials",
            "clientId": cl_id,
            "secret": cl_secret,
            "scope": "api.bcs.manage"
        };
        var request = new sn_ws.RESTMessageV2();
        request.setHttpMethod('POST');
        request.setEndpoint('https://api-cx.cisco.com/torii-auth/v1/token');//  https://api-cx-stg.cisco.com/torii-auth/v1/token
        request.setRequestBody(JSON.stringify(body));

        request.setRequestHeader("Content-Type", 'Application/json');
        //request.setMIDServer("Mid_Server_demo");
        // request.setRequestHeader('Host','');
        // request.setRequestHeader('Content-Length','');

        var response = request.execute();
        var httpResponseStatus = response.getStatusCode();
        var httpResponsebody = response.getBody();

        gs.info("http response body new: " + httpResponseStatus + ': ' + httpResponsebody);
        if (httpResponseStatus == 200) {
            var parsedResponse = JSON.parse(httpResponsebody);

            var token_type = parsedResponse.tokenType;
            var access_token = parsedResponse.accessToken;

            gs.info("token: : " + token_type + ': ' + access_token);
            current.access_token = access_token;
            current.update();
            var appUtil = new Cisco_AppUtil();
            var jsonResp = appUtil.makeApiCall('GET', '/productAlerts/fieldNotices?offset=0', '', current);
            var httpstatus = jsonResp.getStatusCode();
            if (httpstatus == 200) {
                gs.addInfoMessage('Validated the configurations successfully.');
                gs.setProperty("x_caci_cisco_bcs.bcs_log_verbosity", current.log_level);
                gs.setProperty("x_caci_cisco_bcs.start.import", true);
				current.updated=current.sys_updated_on;
                current.update();
                action.setRedirectURL('x_caci_cisco_bcs_cisco_import_queue_list.do?sysparm_query=state!%3Dcompleted');
                var daoScrpt = new Cisco_DAOScript();
                daoScrpt.insertIntoQueue('Start Import', '', '',cl_id,current.sys_id + '');
            }

        } else {
            if (httpResponseStatus == 403 || httpResponseStatus == 401 || httpResponseStatus == 400 || httpResponseStatus == 404) {
                gs.addErrorMessage('Configuration validation failed. Please provide valid data.');
            } else if (httpResponseStatus == 0 ) {
                gs.addErrorMessage('There is some problem reaching out to the server. Please check the logs for more information.');
            }else {
				gs.addErrorMessage('Unknown error, please check logs for more information.');
            }
            action.setRedirectURL(current);
			
        }
        //         var Encrypter = new GlideEncrypter();
        //         var cl_id_encrypt = Encrypter.encrypt(cl_id);
        //         var cl_secret_encrypt = Encrypter.encrypt(cl_secret);
        //         gs.info("cisco decrypted: " + cl_id_decrypt + ': ' + cl_secret_decrypt);
        //         current.customer_id = cl_id_encrypt;
        //         current.api_key = cl_secret_encrypt;
        // current.update();

        /*var appUtil = new Cisco_AppUtil();
        var jsonResp = appUtil.makeApiCall('GET', '/productAlerts/fieldNotices?offset=0', '', current);
        var httpstatus = jsonResp.getStatusCode();
        if (httpstatus == 200) {
            gs.addInfoMessage('Validated the configurations successfully.');
            gs.setProperty("x_caci_cisco_bcs.bcs_log_verbosity", current.log_level);
            gs.setProperty("x_caci_cisco_bcs.start.import", true);

            current.update();
            action.setRedirectURL('x_caci_cisco_bcs_cisco_import_queue_list.do?sysparm_query=state!%3Dcompleted');
            var daoScrpt = new Cisco_DAOScript();
            daoScrpt.insertIntoQueue('Start Import', '', '', current.sys_id + '');
        } else {
			gs.info("Inside else");
            if (httpstatus == 403 || httpstatus == 401) {
                gs.addErrorMessage('Configuration validation failed. Please provide valid data.');
            } else if (httpstatus == 0 || httpstatus == 404) {
                gs.addErrorMessage('There is some problem reaching out to the server. Please check the logs for more information.');
            } else {
				gs.info("Vrushali");
                gs.addErrorMessage('Unknown error, please check logs for more information.');
            } 
            action.setRedirectURL(current);
        }
		*/
    }
} catch (e) {
    logger.error("Exception caught inside Save & Import UI Action while starting import. Error :- " + e);
}]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-10-23 06:59:28</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>84775d15db482010c81a7b82399619ec</sys_id>
        <sys_mod_count>131</sys_mod_count>
        <sys_name>Save &amp; Import</sys_name>
        <sys_overrides/>
        <sys_package display_value="Cisco BCS Operational Insights" source="x_caci_cisco_bcs">56b8d9362f3310108956ea5ef699b62d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cisco BCS Operational Insights">56b8d9362f3310108956ea5ef699b62d</sys_scope>
        <sys_update_name>sys_ui_action_84775d15db482010c81a7b82399619ec</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-11 08:51:35</sys_updated_on>
        <table>x_caci_cisco_bcs_configuration</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
